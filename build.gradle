plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
    id 'org.openapi.generator' version '7.5.0'
    id 'maven-publish'
    id 'jacoco'
    id 'org.flywaydb.flyway' version '10.17.0'
}

group = 'com.bonbonn'
version = '1.0.0-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url = 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security
    implementation 'org.springframework.boot:spring-boot-starter-security:3.5.5'
    compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.openapitools:jackson-databind-nullable:0.2.6"

    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    implementation 'org.mariadb.jdbc:mariadb-java-client:3.5.5'
    implementation group: 'org.flywaydb', name: 'flyway-core', version: '8.5.4'
    implementation 'org.flywaydb:flyway-mysql:8.4.4'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.4.1'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


openApiGenerate {
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/static/openapi.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = "com.bonbonn.springboot-starter.api"
    modelPackage = "com.bonbonn.springboot-starter.model"
    invokerPackage = "com.bonbonn.invoker"
    library = "spring-boot"
    configOptions = [
            useJakartaEe: "true",
            dateLibrary: "java8",
            interfaceOnly: "true",
            skipDefaultInterface: "true",
            beanValidation: "true"
    ]
}

tasks.test {
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
}
tasks.jacocoTestReport {
    dependsOn(tasks.test)
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            '-Amapstruct.defaultComponentModel=spring'
    ]
}

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/src/main/java"
        }
    }
}

tasks.named('compileJava') {
    dependsOn tasks.named('openApiGenerate')
}

tasks.named('build') {
    dependsOn tasks.named('openApiGenerate')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/bonbonn1912/tuya-service")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
